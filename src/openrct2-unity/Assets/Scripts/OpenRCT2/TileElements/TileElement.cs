using System;
using System.Runtime.InteropServices;

namespace Lib
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public struct TileElement : IEquatable<TileElement>
    {
        public byte type;
        public byte flags;
        public byte baseHeight;
        public byte clearanceHeight;

        public byte slot0x1;
        public byte slot0x2;
        public byte slot0x3;
        public byte slot0x4;

        public byte slot0x5;
        public byte slot0x6;
        public byte slot0x7;
        public byte slot0x8;

        public byte slot0x9;
        public byte slot0xA;
        public byte slot0xB;
        public byte slot0xC;


        // The mask skim off the extra bits, to retrieve the actual type.
        const byte TypeMask = 0b00111100;


        // The mask skim off the extra bits, to retrieve the rotation.
        const byte RotationMask = 0b00000011;


        /// <summary>
        /// Gets the type of the element.
        /// </summary>
        public TileElementType Type
            => (TileElementType)(type & TypeMask);


        /// <summary>
        /// Gets the rotation of the element, which will be a value between 0 and 4.
        /// </summary>
        public byte Rotation
            => (byte)(type & RotationMask);


        #region Equality overrides

        /// <summary>
        /// Compares two tile elements to see whether they are equal.
        /// </summary>
        public static bool Equals(ref TileElement left, ref TileElement right)
            => (left.type == right.type)
            && (left.flags == right.flags)
            && (left.baseHeight == right.baseHeight)
            && (left.clearanceHeight == right.clearanceHeight)
            && (left.slot0x1 == right.slot0x1)
            && (left.slot0x2 == right.slot0x2)
            && (left.slot0x3 == right.slot0x3)
            && (left.slot0x4 == right.slot0x4)
            && (left.slot0x5 == right.slot0x5)
            && (left.slot0x6 == right.slot0x6)
            && (left.slot0x7 == right.slot0x7)
            && (left.slot0x8 == right.slot0x8)
            && (left.slot0x9 == right.slot0x9)
            && (left.slot0xA == right.slot0xA)
            && (left.slot0xB == right.slot0xB)
            && (left.slot0xC == right.slot0xC);


        /// <inheritdoc/>
        public override bool Equals(object obj)
            => (obj is TileElement tile && Equals(ref this, ref tile));


        /// <inheritdoc/>
        public bool Equals(TileElement other)
            => (Equals(ref this, ref other));


        /// <inheritdoc/>
        public static bool operator ==(TileElement left, TileElement right)
            => (Equals(ref left, ref right));


        /// <inheritdoc/>
        public static bool operator !=(TileElement left, TileElement right)
            => (!Equals(ref left, ref right));


        /// <summary>
        /// Autogenerated hash function.
        /// </summary>
        public override int GetHashCode()
        {
            int hashCode = 437187081;
            hashCode = hashCode * -1521134295 + type.GetHashCode();
            hashCode = hashCode * -1521134295 + flags.GetHashCode();
            hashCode = hashCode * -1521134295 + baseHeight.GetHashCode();
            hashCode = hashCode * -1521134295 + clearanceHeight.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x1.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x2.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x3.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x4.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x5.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x6.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x7.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x8.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0x9.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0xA.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0xB.GetHashCode();
            hashCode = hashCode * -1521134295 + slot0xC.GetHashCode();
            return hashCode;
        }

        #endregion
    }
}
